<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Liked Cats</title>
    <link rel="stylesheet" href="main.css">
    <style>
        .cat-block {
            border: 1px solid #ccc;
            padding: 20px;
            margin-bottom: 20px;
            background-color: white;
        }
        #cat-image-element {
            float: left;
            padding: 20px;
            margin-top: 2vw;
            margin-right: 20px;
        }
        h2, p, form {
            margin-left: 20px;
        }
        h2 {
            margin-top: 3vw;
        }

        form {
            clear: both;
        }
    </style>
</head>
<body>
    <div class="header">
   <h1><img src="ProjektiLogo.png" alt="Logo JoVaNa" id="logo"></h1>
    <nav>
        <ul>
            <li><a href="/">Home</a></li>
            <li><a href="/likedcats">Liked Cats</a></li>
        </ul>
    </nav>
</div>

    <div id="cat-container">
        <!-- Kissat ladataan tähän -->
    </div>

 <script>
        // Funktio sähköpostin lähettämiseen
        const handleFormSubmit = async (event) => {
            event.preventDefault();

            const form = event.target;
            const emailInput = form.querySelector('#emailInput'); // Sähköpostin kenttä

            // Haetaan kyseisen kissan tiedot lomaketta varten
            const breed = form.querySelector('input[name="breed"]').value;
            const description = form.querySelector('input[name="description"]').value;
            const origin = form.querySelector('input[name="origin"]').value;
            const imageUrl = form.querySelector('input[name="imageUrl"]').value;

            // Haetaan talteen sähköpostin tiedot
            const email = emailInput.value;

            try {
                // Viedään sähköpostin tiedot serverille
                const response = await fetch("/submit-form", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({
                        email,
                        breed,
                        description,
                        origin,
                        imageUrl
                    })
                });

                if (response.ok) {
                    // Jos sähköpostin lähetys onnistuu, näytetään viesti
                    const confirmationMessage = document.createElement('span');
                    confirmationMessage.textContent = 'Email sent';
                    emailInput.insertAdjacentElement('afterend', confirmationMessage);

                    // Tekstikentän tiedot tyhjennetään
                    emailInput.value = '';
                } else {
                    throw new Error("Failed to send email");
                }
            } catch (error) {
                console.error("Error sending email:", error);

                // Näytetään virheilmoitus, jos sähköpostia ei onnistuttu lähettämään
                const errorMessage = document.createElement('span');
                errorMessage.textContent = 'Failed to send email';
                errorMessage.style.color = 'red'; // Virheilmoituksen tyyli
                emailInput.insertAdjacentElement('afterend', errorMessage);
            }
        };

        // Haetaan kissojen tiedot, kun sivu latautuu
        window.addEventListener("load", () => {
            fetch("/api/liked-cats")
                .then((response) => response.json())
                .then((data) => {
                    // Käydään läpi kaikki kissat, ja näytetään ne sivulla
                    data.forEach((cat) => {
                        const catContainer = document.getElementById("cat-container");

                        // Yhden kissan blokki
                        const catBlock = document.createElement("div");
                        catBlock.classList.add("cat-block");

                        // Blokin tiedot
                        const catContent = `
                            <img id="cat-image-element" src="${cat.imageUrl}" alt="Cat">
                            <h2>${cat.breed}</h2>
                            <p>${cat.description}</p>
                            <p>Origin: ${cat.origin}</p>
                            <form onsubmit="handleFormSubmit(event)">
                                <input type="hidden" name="breed" value="${cat.breed}">
                                <input type="hidden" name="imageUrl" value="${cat.imageUrl}">
                                <input type="hidden" name="description" value="${cat.description}">
                                <input type="hidden" name="origin" value="${cat.origin}">
                                
                                <div>
                                    <label for="emailInput">Email:</label>
                                    <input type="email" id="emailInput" name="email" required>
                                </div>
                                <button type="submit">Send Email</button>
                            </form>
                        `;

                        catBlock.innerHTML = catContent;

                        catContainer.appendChild(catBlock);
                    });
                })
                .catch((error) => console.error("Error fetching liked cats:", error));
        });
    </script>
</body>
</html>